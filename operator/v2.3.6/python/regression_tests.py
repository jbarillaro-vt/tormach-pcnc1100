# coding=utf-8
#-----------------------------------------------------------------------
# Copyright © 2014-2018 Tormach® Inc. All rights reserved.
# License: GPL Version 2
#-----------------------------------------------------------------------

#
# Module for regression tests of g code generated by conv. routines
#

import csv
import os

class test():
    def __init__(self, status, dros, csv_filepath, error_handler):
        '''
        ---- Architechture of the regression test vehicle ----

        Regression tests will be launched from an active gui running LCNC (type REGRESSION_TEST in MDI line)
        Values for conv DROs are stored in a csv file, selected via file chooser after RTV is started
        Tool table values will be read in from the current tool table.  23 tools are available, so it is possible to have
        tools of each type (front/rear, each tip orientation) in a single table.  This file should be saved off for regression tests.

        Tests fall into three broad categories:
        1. Error cases - entries in the dros should produce an error and no gcode should be generated
        2. Non-error cases - entries in the dros should produce valid g code.  TODO - this g code could be compared to previously created
           g code to validate the contents
        3. Regression cases - cases that previously tested as errors when they should not have, or cases that previously tested succefully
           when they should have failed, or (hardest to detect) cases which should produce g code and DID produce g code, but the g code
           had logical errors

        TESTING ERROR CASES
        One csv file will be used for each conversational page (od_turn.csv, chamfer.csv, etc).
        Column 0 contains the widget names
        Each subsequent column contains the dro input values for a single test case (test 1 is col 1, etc)
        Result row (last row in file) contains the expected result

        VERIFYING ERROR CASE RESULTS
        generate_gcode method returns either true or false - should be checked against expected value

        TESTING NON-ERROR CASES
        Non-error test cases produce valid g code files, and therefore must either be checked manually or against a library of known-good
        g code files (using a diff viewer, perhaps)

        TESTING REGRESSION CASES
        Regression cases will be inspected by hand or via file comparison.


        '''

        self.status = status
        self.csv_filepath = csv_filepath


        self.conv_dro_list = dros[0]
        self.od_turn_dro_list = dros[1]
        self.id_basic_dro_list = dros[2]
        self.id_turn_dro_list = dros[3]
        self.face_dro_list = dros[4]
        self.chamfer_dro_list = dros[5]
        self.corner_dro_list = dros[6]
        self.groove_dro_list = dros[7]
        self.part_dro_list = dros[8]
        self.drill_dro_list = dros[9]
        self.tap_dro_list = dros[10]
        self.thread_dro_list = dros[11]
        self.error_handler = error_handler

        print "using csv file: ", csv_filepath


        for name, dro in self.conv_dro_list.iteritems():
            print name

        with open(csv_filepath, 'rb') as f:
            reader = csv.reader(f)
            for row in reader:
                self.conv_dro_list[row[0]].set_text(row[1])





    def parse_filepath(self):
        path, name = os.path.split(self.csv_filepath)
        return name
